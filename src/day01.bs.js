// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Char        = require("bs-platform/lib/js/char.js");
var List        = require("bs-platform/lib/js/list.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function explode(s) {
  var _index = s.length - 1 | 0;
  var _list = /* [] */0;
  while(true) {
    var list = _list;
    var index = _index;
    var match = +(index < 0);
    if (match !== 0) {
      return list;
    } else {
      _list = /* :: */[
        Char.escaped(Caml_string.get(s, index)),
        list
      ];
      _index = index - 1 | 0;
      continue ;
      
    }
  };
}

function solve(string) {
  var list = List.map((function (item) {
          return /* Some */[Caml_format.caml_int_of_string(item)];
        }), explode(string));
  return List.fold_left2((function (acc, a1, a2) {
                if (a1) {
                  if (a2) {
                    var a1$1 = a1[0];
                    if (a1$1 === a2[0]) {
                      return acc + a1$1 | 0;
                    } else {
                      return acc;
                    }
                  } else {
                    return acc;
                  }
                } else {
                  return acc;
                }
              }), 0, List.append(list, /* :: */[
                  List.hd(list),
                  /* [] */0
                ]), /* :: */[
              /* None */0,
              list
            ]);
}

exports.explode = explode;
exports.solve   = solve;
/* No side effect */
